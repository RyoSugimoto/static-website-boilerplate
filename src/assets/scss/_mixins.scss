@use 'sass:math' as math;

@mixin aspect-ratio-flexible($width, $height) {
  position: relative;
  &::before {
    content: '';
    float: left;
    padding-top: math.div($height, $width) * 100%;
  }
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  display: block;
  height: 0;
  padding-top: math.div($height, $width) * 100%;
}

@mixin aspect-ratio-content {
  height: 100%;
  left: 0;
  object-fit: cover;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin clearfix($position: after) {
  &::#{position} {
    clear: both;
    content: "";
    display: block;
  }
}

@mixin full-width {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}

@mixin proportional {
  font-feature-settings: "palt" 1;
}

@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  clip-path: inset;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin over($px: '640px') {
  @media only screen and (min-width: $px) {
    @content;
  }
}

@mixin under($px: '640px') {
  @media only screen and (max-width: $px) {
    @content;
  }
}

@mixin dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

@mixin light {
  @media (prefers-color-scheme: light) {
    @content;
  }
}

@function rem($px, $base: 16px) {
  @if type-of($px) != 'number' or unitless($px) {
    @warn "The unit of the argument must be a number and 'px'.";
    @return $px;
  }
  $no-px: math.div($px, ($px * 0 + 1));
  $no-px-base: math.div($base, ($base * 0 + 1));
  $value: math.div($no-px, $no-px-base) * 1rem;
  @return $value;
}

/**
 * Postcss
 */

@mixin autoplace {
  /*! autoprefixer grid: autoplace */
}

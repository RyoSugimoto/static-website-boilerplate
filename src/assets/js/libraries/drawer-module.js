import 'wicg-inert';

const styleForFixed = {
  height: '100vh',
  left: '0',
  overflow: 'hidden',
  position: 'fixed',
  width: '100vw'
};

const scrollingElement = (() => {
  const ua = window.navigator.userAgent.toLowerCase();
  if ('scrollingElement' in document) return document.scrollingElement;
  if (ua.indexOf('webkit') > 0) return document.body;
  return document.documentElement;
})();

function fixBackface(fixed) {
  const scrollY = fixed ? scrollingElement.scrollTop : parseInt(document.body.style.top) ?? 0;
  const scrollbarWidth = window.innerWidth - document.body.clientWidth;
  document.body.style.top = fixed ? `-${scrollingElement.scrollTop}px` : '';
  document.body.style.paddingRight = fixed ? `${scrollbarWidth}px` : '';
  Object.keys(styleForFixed).forEach(key => {
    if (fixed) {
      document.body.style.setProperty(key, styleForFixed[key]);
    } else {
      document.body.style.removeProperty(key);
    }
  });
  if (!fixed) scrollingElement.scrollTop = scrollY * -1;
}

class Drawer {
  constructor(args) {
    this.isExpanded = false;
    this.enableFixBackface = true;
    this.enableHistory = false;
    this.id = 'Drawer-' + new Date().getTime(); // Drawer body

    if (typeof args !== 'object' || args.drawer === undefined) throw new Error(`${this.constructor.name}: The "drawer" parameter is required. => ex: new Drawer({ drawer: '#drawer' })`);
    if (typeof args.drawer !== 'string' || '') throw new Error(`${this.constructor.name}: The "drawer" parameter must be "string" type and "CSS selector".`);
    if (args.drawer === '') throw new Error(`${this.constructor.name}: The "drawer" parameter is empty.`);
    this.drawerElement = document.querySelector(args.drawer);
    if (!this.drawerElement) throw new Error(`${this.constructor.name}: The Element for "drawer" is not found.`);
    this.drawerElement.setAttribute('data-drawer-is-initialized', 'true');

    if (this.drawerElement.id) {
      this.id = this.drawerElement.id;
    } else {
      this.drawerElement.id = this.id;
    }

    if (this.isExpanded) {
      this.drawerElement.removeAttribute('inert');
      this.drawerElement.removeAttribute('hidden');
    } else {
      this.drawerElement.setAttribute('inert', '');
      this.drawerElement.setAttribute('hidden', '');
    } // Switches for toggle


    this.switchElements = typeof args.switch === 'string' ? document.querySelectorAll(args.switch) : null;

    if (this.switchElements) {
      this.switchElements.forEach(element => {
        element.addEventListener('click', this.toggle.bind(this));
        element.setAttribute('data-drawer-is-initialized', 'true');
        element.setAttribute('aria-controls', this.id);
      });
    } // Elements that are set "inert" attribute when the drawer is expanded


    this.inertElements = typeof args.inert === 'string' ? document.querySelectorAll(args.inert) : null;

    if (this.inertElements) {
      this.inertElements.forEach(element => {
        element.setAttribute('data-drawer-is', 'initialized');

        if (this.isExpanded) {
          element.setAttribute('inert', '');
        } else {
          element.removeAttribute('inert');
        }
      });
    } // Preventing scroll when the drawer is expanded


    this.enableFixBackface = args.enableFixBackface ?? true; // Adding the state of the drawer to the history of your browser

    if (args.enableHistory) {
      this.enableHistory = true;
      window.addEventListener('popstate', this._popstateHandler.bind(this));
    }
  }

  toggle(event) {
    event.preventDefault();

    if (this.isExpanded) {
      this.close();
    } else {
      this.open();
    }
  }

  open() {
    this._changeState(true);

    if (this.enableHistory) this._pushState(true);
  }

  close() {
    this._changeState(false);

    if (this.enableHistory) this._pushState(false);
  }

  _changeState(isExpanded) {
    if (isExpanded) {
      var _this$drawerElement, _this$drawerElement2;

      (_this$drawerElement = this.drawerElement) === null || _this$drawerElement === void 0 ? void 0 : _this$drawerElement.removeAttribute('inert');
      (_this$drawerElement2 = this.drawerElement) === null || _this$drawerElement2 === void 0 ? void 0 : _this$drawerElement2.removeAttribute('hidden');
      document.addEventListener('keyup', this._keyupHandler.bind(this));
    } else {
      var _this$drawerElement3, _this$drawerElement4;

      // When the drawer is hidden
      (_this$drawerElement3 = this.drawerElement) === null || _this$drawerElement3 === void 0 ? void 0 : _this$drawerElement3.setAttribute('inert', '');
      (_this$drawerElement4 = this.drawerElement) === null || _this$drawerElement4 === void 0 ? void 0 : _this$drawerElement4.setAttribute('hidden', '');
      document.removeEventListener('keyup', this._keyupHandler.bind(this));
    }

    if (typeof fixBackface === 'function' && this.enableFixBackface) fixBackface(isExpanded);

    if (this.switchElements) {
      this.switchElements.forEach(element => {
        element.setAttribute('aria-expanded', String(isExpanded));
      });
    }

    if (this.inertElements) {
      this.inertElements.forEach(element => {
        if (isExpanded) {
          element.setAttribute('inert', '');
        } else {
          element.removeAttribute('inert');
        }
      });
    }

    this.isExpanded = isExpanded;
  }

  _keyupHandler(event) {
    if (event.key === 'Escape' || event.key === 'Esc') this.close();
  }

  _popstateHandler(event) {
    this._changeState(!this.isExpanded);
  }

  _pushState(isExpanded) {
    history.pushState({
      isExpanded: isExpanded
    }, 'drawerState');
  }

}

export default Drawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

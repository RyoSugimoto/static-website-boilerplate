//-
  img要素を出力する。
  +image(`${assetPath}/images/name.jpg`, 'altテキスト')

mixin image(src='', alt='', webp=true, avif=false)
  -
    // 画像の公開ディレクトリ
    const distDirectoryPath = assetPath ? `${assetPath}/images` : ''
    // srcを、$1: ファイルパス、$2: 拡張子、$3: クエリ文字列に分割する正規表現
    const regex = /(.+)\.(jpe?g|png|gif|webp)(\?.*)?$/
    const ext = src.replace(regex, '$2')
    const distSrc = `${distDirectoryPath}/${src}`

    // 幅と高さを取得してそれぞれの属性にセット。
    if (getImageData !== undefined && typeof getImageData === 'function') {
      // imageData()で幅と高さを取得する。ファイルが見つからない場合はfalseを取得。
      let imageData = getImageData(src)
      if (imageData.isError) {
        console.log(imageData.message)
      } else {
        attributes['width'] = attributes.width || imageData.width || ''
        attributes['height'] = attributes.height || imageData.height || ''
      }
    }

  //- webpオプションかavifオプションがtrueの場合は、JPEGとPNGは同名のWebpを優先して表示し、フォールバックとして元画像を設定。
  if webp || avif && /jpe?g|png/.test(ext)
    picture
      if avif
        source(srcset=distSrc.replace(regex, '$1.avif$3'), type='image/avif')
      if webp
        source(srcset=distSrc.replace(regex, '$1.webp$3'), type='image/webp')
      img.component-image(src=distSrc, alt=alt)&attributes(attributes)

  //- webpオプションがfalseの場合は、imgのみを表示
  else
    img.component-image(src=distSrc, alt=alt)&attributes(attributes)

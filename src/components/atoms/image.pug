//-
  img要素を出力する。
  @param {string} src 画像ソースディレクトリ以下の画像名もしくはパス。
  @param {string} path 公開時の画像ディレクトリへのパス。何も渡さなければ、デフォルト設定を参照する。
  @param {boolean} nextGenFormats 次世代フォーマットの画像を使用するかどうか。
mixin image(src='', path='', nextGenFormats=true)
  -
    // デフォルト設定
    // website.config.jsのconfig.components.imageで上書きをする。
    const componentSettings = Object.assign({
      defaultPath: '/assets/images',
      nextGenFormats: true, // 次世代フォーマットが未対応の環境向けのフォールバック処理をするか
      webp: true, // webpの使用を有効にするか
      avif: true, // avifの使用を有効にするか
    }, Config.components ? Config.components.image : {})

    // srcを、$1: ファイルパス、$2: 拡張子、$3: クエリ文字列に分割する正規表現
    const regex = /(.+)\.(jpe?g|png|gif|webp)(\?.*)?$/
    const ext = src.replace(regex, '$2')

    // パスの設定
    const distSrc = path ? `${path}/${src}` : `${componentSettings.defaultPath}/${src}`

    // 幅と高さを取得してそれぞれの属性にセット。
    if (getImageData !== undefined && typeof getImageData === 'function') {
      // imageData()で幅と高さを取得する。ファイルが見つからない場合はfalseを取得。
      let imageData = getImageData(src)
      if (imageData.isError) {
        console.log(imageData.message)
      } else {
        attributes['width'] = imageData.width
        attributes['height'] = imageData.height
      }
    }

    // altの設定がなければ、altの値に空文字列を設定
    attributes['alt'] = attributes['alt'] || ''

  //- nextGenFormatsオプションがtrueの場合は、JPEGとPNGは同名の次世代フォーマット画像を優先して表示し、フォールバックとして元画像を設定。
  if nextGenFormats && componentSettings.nextGenFormats && /jpe?g|png/.test(ext)
    picture
      if componentSettings.avif
        source(srcset=distSrc.replace(regex, '$1.avif$3'), type='image/avif')
      if componentSettings.webp
        source(srcset=distSrc.replace(regex, '$1.webp$3'), type='image/webp')
      img.component-image(src=distSrc)&attributes(attributes)

  //- nextGenFormatsオプションがfalseの場合は、imgのみを表示
  else
    img.component-image(src=distSrc)&attributes(attributes)
